/*
 * Weather + photo frame for InkPlate 10 and 6.
 * 
 * It is based on https://github.com/e-radionicacom/Inkplate-Arduino-library/tree/master/examples/Inkplate10/Projects
 * 
 * Author: zhangtemplar@gmail.com
 */
// Next 3 lines are a precaution, you can ignore those, and the example would also work without them
#ifndef ARDUINO_INKPLATE10
#error "Wrong board selection for this example, please select Inkplate 10 in the boards menu."
#endif

// ----------------------------------
/*
 * Please create your own settings.h file with the following variables
 * // time zone as int
 * int SECRET_TIMEZONE = -7;
 * // City name to de displayed on the bottom
 * char SECRET_CITY[128] = "latitude,longitude";
 * // Change to your wifi ssid and password
 * char *SECRET_SSID = "";
 * char *SECRET_PASS = "";
 * // url to fetch images, for example apiflash.com
 * char *SECRET_PHOTO_URL = ""
 */
#include "settings.h"

// Include Inkplate library to the sketch
#include "Inkplate.h"

// Header file for easier code readability
#include "Network.h"

// Including fonts used
#include "Fonts/Roboto_Light_120.h"
#include "Fonts/Roboto_Light_36.h"
#include "Fonts/Roboto_Light_48.h"

// Including icons generated by the py file
#include "icons.h"

// Delay between API calls
// for weather, delay 1 minute before each call
#define WEATHER_DELAY_US 60 * 1000 * 1000
// wait for 4 hours before next photo update
#define PHOTO_DELAY_US 4 * 60 * 60 * 1000 * 1000

// Inkplate object
Inkplate display(INKPLATE_1BIT);

// All our network functions are in this object, see Network.h
Network network;

// Contants used for drawing icons
char abbrs[32][16] = {"sn", "sl", "h", "t", "hr", "lr", "s", "hc", "lc", "c"};
const uint8_t *logos[16] = {icon_sn, icon_sl, icon_h, icon_t, icon_hr, icon_lr, icon_s, icon_hc, icon_lc, icon_c};
const uint8_t *s_logos[16] = {icon_s_sn, icon_s_sl, icon_s_h,  icon_s_t,  icon_s_hr,
                              icon_s_lr, icon_s_s,  icon_s_hc, icon_s_lc, icon_s_c};

RTC_DATA_ATTR char abbr1[16];
RTC_DATA_ATTR char abbr2[16];
RTC_DATA_ATTR char abbr3[16];
RTC_DATA_ATTR char abbr4[16];

// Variables for storing temperature
RTC_DATA_ATTR char temps[8][4] = {
    "0F",
    "0F",
    "0F",
    "0F",
};

// Variables for storing days of the week
RTC_DATA_ATTR char days[8][4] = {
    "",
    "",
    "",
    "",
};

// Variable for counting partial refreshes
RTC_DATA_ATTR unsigned refreshes = 0;

// Constant to determine when to full update
const int fullRefresh = 60;

// Variables for storing current time and weather info
RTC_DATA_ATTR char currentTemp[16] = "0F";
RTC_DATA_ATTR char currentWind[16] = "0m/s";

RTC_DATA_ATTR char currentTime[16] = "9:41";

RTC_DATA_ATTR char currentWeather[32] = "-";
RTC_DATA_ATTR char currentWeatherAbbr[8] = "th";

/*
 * which page to show
 * 0: weather
 * 1: photo
 * 2: calendar
 * others are not supported
 */
#define PAGE_WEATHER 0
#define PAGE_PHOTO 1
#define PAGE_CALENDAR 2
RTC_DATA_ATTR char page = PAGE_WEATHER;
RTC_DATA_ATTR char previousPage = -1;

// functions defined below
void drawWeather();
void drawCurrent();
void drawTemps();
void drawCity();
void drawTime();
void refreshDisplay(bool forceClear);

void weatherPage()
{
    if (refreshes % fullRefresh == 0)
    {
        // Calling our begin from network.h file
        network.begin(SECRET_CITY);

        // If city not found, do nothing
        if (network.location == -1)
        {
            display.setCursor(50, 290);
            display.setTextSize(3);
            display.print(F("City not in Metaweather Database"));
            display.display();
            while (1)
                ;
        }

        // Get all relevant data, see Network.cpp for info
        network.getTime(currentTime);
        network.getTime(currentTime);
        network.getDays(days[0], days[1], days[2], days[3]);
        network.getData(SECRET_CITY, temps[0], temps[1], temps[2], temps[3], currentTemp, currentWind, currentTime,
                        currentWeather, currentWeatherAbbr, abbr1, abbr2, abbr3, abbr4);

        // Draw data, see functions below for info
        drawTime();
        drawWeather();
        drawCurrent();
        drawTemps();
        drawCity();

        display.display();
    }
    else
    {
        // Refresh only the clock
        network.getTime(currentTime);

        drawTime();
        drawWeather();
        drawCurrent();
        drawTemps();
        drawCity();

        display.partialUpdate();
    }

    ++refreshes;

    // Go to sleep
    esp_sleep_enable_timer_wakeup(WEATHER_DELAY_US);
    esp_sleep_enable_ext0_wakeup(GPIO_NUM_34, 1);
    (void)esp_deep_sleep_start();
}

void photoPage() {

    // Join wifi
    display.joinAP(SECRET_SSID, SECRET_PASS);

    Serial.println(display.drawImage(SECRET_PHOTO_URL, display.PNG, 0, 0));
    display.display();

    Serial.println("Going to sleep");
    delay(100);
    // sleep for 15 seconds
    esp_sleep_enable_timer_wakeup(PHOTO_DELAY_US);
    esp_sleep_enable_ext0_wakeup(GPIO_NUM_34, 1);
    esp_deep_sleep_start();
}

void readTouchPad() {
    // According to the schema, touch pad are connected to port B 2, 3 and 4 accordingly
    // and from https://github.com/e-radionicacom/Inkplate-Arduino-library/blob/451f49eb752d37d49c9beebefa1eb2817d541c86/src/include/Mcp.cpp
    // we know this is matched to bit 10, 11 and 12 accordingly
    uint16_t key = display.getINTstateInternal(MCP23017_INT_ADDR, display.mcpRegsInt);
    if (key & (1 << 10))
    { // Check if first pad has been touched. If it is, decrement the number and refresh the screen.
        page = PAGE_WEATHER;
        Serial.println("key pressed for weather");
    }

    if (key & (1 << 11))
    { // If you touched second touchpad, set number to zero and refresh screen by calling our displayNumber() function
        page = PAGE_PHOTO;
        Serial.println("key pressed for photo");
    }

    if (key & (1 << 12))
    { // If you touched third touchpad, incerement the number and refresh the screen.
        page = PAGE_CALENDAR;
        Serial.println("key pressed for calendar");
    }
}

void setup()
{
    // common set up
    Serial.begin(115200);
    display.begin();

    // Setup mcp interrupts
    for (int touchPadPin = 10; touchPadPin <=12; touchPadPin++) {
      display.pinModeInternal(MCP23017_INT_ADDR, display.mcpRegsInt, touchPadPin, INPUT);
      display.setIntOutputInternal(MCP23017_INT_ADDR, display.mcpRegsInt, 1, false, false, HIGH);
      display.setIntPinInternal(MCP23017_INT_ADDR, display.mcpRegsInt, touchPadPin, RISING);
    }
    readTouchPad();

    refreshDisplay(false);
  
    switch (page) {
      case PAGE_WEATHER:
        weatherPage();
        break;
      case PAGE_PHOTO:
        photoPage();
        break;
      default:
        Serial.println("unsupported page");
    }
    // TODO: handle key press
}

void loop()
{
}

/*
 * Refresh display when needed.
 * 
 * The display will be cleared if any of the conditions met:
 * - page is switched
 * - forceClear is requested
 */
void refreshDisplay(bool forceClear)
{
    bool shallClear = forceClear;
    if (previousPage != page) {
      shallClear = true;
      previousPage = page;
    }
    // Initial cleaning of buffer and physical screen
    if (shallClear) {
      display.clearDisplay();
      display.display();
    }
}

// Function for drawing weather info
void drawWeather()
{
    // Searching for weather state abbreviation
    for (int i = 0; i < 10; ++i)
    {
        // If found draw specified icon
        if (strcmp(abbrs[i], currentWeatherAbbr) == 0)
            display.drawBitmap(50, 50, logos[i], 152, 152, BLACK);
    }

    // Draw weather state
    display.setTextColor(BLACK, WHITE);
    display.setFont(&Roboto_Light_36);
    display.setTextSize(1);
    display.setCursor(40, 270);
    display.println(currentWeather);
}

// Function for drawing current time
void drawTime()
{
    // Drawing current time
    display.setTextColor(BLACK, WHITE);
    display.setFont(&Roboto_Light_36);
    display.setTextSize(1);

    display.setCursor(1024 - 20 * strlen(currentTime), 35);
    display.println(currentTime);
}

// Function for drawing city name
void drawCity()
{
    // Drawing city name
    display.setTextColor(BLACK, WHITE);
    display.setFont(&Roboto_Light_36);
    display.setTextSize(1);

    display.setCursor(600 - 9 * strlen(SECRET_CITY), 790);
    display.println(SECRET_CITY);
}

// Function for drawing temperatures
void drawTemps()
{
    // Drawing 4 black rectangles in which temperatures will be written
    int rectWidth = 150;
    int rectSpacing = (1200 - rectWidth * 4) / 5;

    display.fillRect(1 * rectSpacing + 0 * rectWidth, 450, rectWidth, 302, BLACK);
    display.fillRect(2 * rectSpacing + 1 * rectWidth, 450, rectWidth, 302, BLACK);
    display.fillRect(3 * rectSpacing + 2 * rectWidth, 450, rectWidth, 302, BLACK);
    display.fillRect(4 * rectSpacing + 3 * rectWidth, 450, rectWidth, 302, BLACK);

    int textMargin = 6;

    display.setFont(&Roboto_Light_48);
    display.setTextSize(1);
    display.setTextColor(WHITE, BLACK);

    display.setCursor(1 * rectSpacing + 0 * rectWidth + textMargin, 450 + textMargin + 40);
    display.println(days[0]);

    display.setCursor(2 * rectSpacing + 1 * rectWidth + textMargin, 450 + textMargin + 40);
    display.println(days[1]);

    display.setCursor(3 * rectSpacing + 2 * rectWidth + textMargin, 450 + textMargin + 40);
    display.println(days[2]);

    display.setCursor(4 * rectSpacing + 3 * rectWidth + textMargin, 450 + textMargin + 40);
    display.println(days[3]);

    // Drawing temperature values into black rectangles
    display.setFont(&Roboto_Light_48);
    display.setTextSize(1);
    display.setTextColor(WHITE, BLACK);

    display.setCursor(1 * rectSpacing + 0 * rectWidth + textMargin, 450 + textMargin + 120);
    display.print(temps[0]);
    display.println(F("C"));

    display.setCursor(2 * rectSpacing + 1 * rectWidth + textMargin, 450 + textMargin + 120);
    display.print(temps[1]);
    display.println(F("C"));

    display.setCursor(3 * rectSpacing + 2 * rectWidth + textMargin, 450 + textMargin + 120);
    display.print(temps[2]);
    display.println(F("C"));

    display.setCursor(4 * rectSpacing + 3 * rectWidth + textMargin, 450 + textMargin + 120);
    display.print(temps[3]);
    display.println(F("C"));

    for (int i = 0; i < 18; ++i)
    {
        // If found draw specified icon
        if (strcmp(abbr1, abbrs[i]) == 0)
            display.drawBitmap(1 * rectSpacing + 0 * rectWidth + textMargin, 450 + textMargin + 150, s_logos[i], 48, 48,
                               WHITE, BLACK);
    }

    for (int i = 0; i < 18; ++i)
    {
        // If found draw specified icon
        if (strcmp(abbr2, abbrs[i]) == 0)
            display.drawBitmap(2 * rectSpacing + 1 * rectWidth + textMargin, 450 + textMargin + 150, s_logos[i], 48, 48,
                               WHITE, BLACK);
    }

    for (int i = 0; i < 18; ++i)
    {
        // If found draw specified icon
        if (strcmp(abbr3, abbrs[i]) == 0)
            display.drawBitmap(3 * rectSpacing + 2 * rectWidth + textMargin, 450 + textMargin + 150, s_logos[i], 48, 48,
                               WHITE, BLACK);
    }

    for (int i = 0; i < 18; ++i)
    {
        // If found draw specified icon
        if (strcmp(abbr4, abbrs[i]) == 0)
            display.drawBitmap(4 * rectSpacing + 3 * rectWidth + textMargin, 450 + textMargin + 150, s_logos[i], 48, 48,
                               WHITE, BLACK);
    }
}

// Current weather drawing function
void drawCurrent()
{
    // Drawing current information

    // Temperature:
    display.setFont(&Roboto_Light_120);
    display.setTextSize(1);
    display.setTextColor(BLACK, WHITE);

    display.setCursor(380, 206);
    display.print(currentTemp);

    int x = display.getCursorX();
    int y = display.getCursorY();

    display.setFont(&Roboto_Light_48);
    display.setTextSize(1);

    display.setCursor(x, y);
    display.println(F("C"));

    // Wind:
    display.setFont(&Roboto_Light_120);
    display.setTextSize(1);
    display.setTextColor(BLACK, WHITE);

    display.setCursor(720, 206);
    display.print(currentWind);

    x = display.getCursorX();
    y = display.getCursorY();

    display.setFont(&Roboto_Light_48);
    display.setTextSize(1);

    display.setCursor(x, y);
    display.println(F("m/s"));

    // Labels underneath
    display.setFont(&Roboto_Light_36);
    display.setTextSize(1);

    display.setCursor(322, 288);
    display.println(F("TEMPERATURE"));

    display.setCursor(750, 288);
    display.println(F("WIND SPEED"));
}
